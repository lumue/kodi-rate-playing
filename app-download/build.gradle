buildscript {
	
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

plugins {
	id "com.github.luzzif.integration-tests" version "1.3.0"
	id "java"
	id "org.jetbrains.kotlin.jvm" version "1.3.10"
}

repositories {
	maven { url 'https://dl.bintray.com/konrad-kaminski/maven' }
}


apply plugin: 'kotlin-spring'

apply plugin: 'org.springframework.boot'
bootJar {
	mainClassName = 'io.github.lumue.woelkchen.download.DownloadserviceApplication'
}

apply plugin: 'io.spring.dependency-management'


sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}


integrationTests {
	location = 'integrationtest'
	language = 'kotlin'
}

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")

	compile 'com.github.lumue:ydlwrapper:master-SNAPSHOT'
	compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile 'org.jsoup:jsoup:1.11.3'
	compile 'org.slf4j:slf4j-api:1.7.10'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'
	//nfo
	compile 'com.github.lumue:nfotools:master-SNAPSHOT'
	compile 'ru.gildor.coroutines:kotlin-coroutines-retrofit:0.13.0-eap13'

	implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6")
	
	testCompile group: 'commons-io', name: 'commons-io', version: '2.6'
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
	testCompile group: 'ch.qos.logback', name: 'logback-classic', version: "1.2.3"
	testCompile("org.assertj:assertj-core:3.11.1")
}

task docker(dependsOn: build) {

	dependsOn 'dockerBuild'

}

task dockerBuild(type: Exec){
	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['build', '-t', "lumue/woelkchen_download:${project.version}", '.']

	doFirst {
		copy {
			from jar
			into stageDir
		}
		copy {
			from file('src/main/docker/Dockerfile')
			into stageDir
		}
	}

}

task dockerRun(type: Exec){

	dependsOn 'dockerBuild'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['run','-d',
	      '--name',"woelkchen_download_${project.version}",
	      '-p','8001:8001',
	      "lumue/woelkchen_download:${project.version}"]

	doLast{
		sleep(10*1000)
	}

}

task dockerStop(type: Exec){

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['stop',"woelkchen_download_${project.version}"]

	ignoreExitValue true

}

task dockerRemove(type: Exec){

	dependsOn 'dockerStop'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args=['rm','-f',"woelkchen_download_${project.version}"]

	ignoreExitValue true
}

task dockerTagLatest(type: Exec){

	mustRunAfter 'dockerBuild'

	def stageDir = file(project.buildDir.absolutePath + '/docker')

	workingDir stageDir
	executable = 'docker'
	args= ['tag', "lumue/woelkchen_download:${project.version}", 'lumue/woelkchen_download:latest']

}